<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_Chamber_Valves" Id="{f30907aa-2202-42ce-b721-cf743607f31e}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_Chamber_Valves
VAR
	bRoughPressOK : BOOL := FALSE;
	bVGC_01_ILK : BOOL := FALSE;
	bVGC_02_ILK : BOOL := FALSE;
	bVGC_03_ILK : BOOL := FALSE;
	bVGC_04_ILK : BOOL := FALSE;
	bVGC_05_ILK : BOOL := FALSE;
	bVGC_06_ILK : BOOL := FALSE;
	bVGC_07_ILK : BOOL := FALSE;
	bVGC_10_CLS_OK : BOOL := FALSE;
	bVGC_10_OPN_OK : BOOL := FALSE;
	bVGC_11_CLS_OK : BOOL := FALSE;
	bVGC_11_OPN_OK : BOOL := FALSE;
	bVGC_17_ILK : BOOL := FALSE;
	bChamberAtVac:BOOL;
	
	bm_dummy_gauge : ST_VG;
	dummy_FFFO : FB_HardwareFFOutput;
	dummy_fbArbiter1    :   FB_Arbiter(1);
	
	
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Roughing manifold logic *)

// insert smart stuff here
// This is not connected to anything right now, not clear what logic will be	
(*
bVGC_01_ILK := F_TurboGateValve_ILK(i_Turbo:=RIX_LI3K2_PTM_01.iq_stPtm,
									i_stISG:=) // need gauge for this
 *)
									
CRIX_VGC_01(i_xExtILK_OK:=TRUE, 
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve => stCRIX_VGC_01);
	

// Our "special" rouging turbo valve. We rough the chamber through this turbo, and this turbo only. We make sure the roughing pump is running,
// and that all the other valves to the roughing line are closed so that we don't backstream from the chamber. The operator is responsible for
// changing protection setpoints.
(*
bVGC_02_ILK := (stCRIX_VGC_01.i_xClsLS AND stCRIX_VGC_03.i_xClsLS AND stCRIX_VGC_04.i_xClsLS AND stCRIX_VGC_05.i_xClsLS AND 
				stCRIX_VGC_06.i_xClsLS AND stCRIX_VGC_07.i_xClsLS) AND F_RoughPumpInlet_ILK(ScrollPump:=stCRIX_MECH_PRO_01) AND
				CRIX_GPI_05.PG.xAT_VAC;
*)
bChamberAtVac := (CRIX_GPI_01.PG.rPRESS < 0.005);
IF (bChamberAtVac) THEN
	CRIX_VGC_02.i_xExt_OK := F_TurboGateValve_Protection_ILK(i_Turbo:=CRIX_PTM_02.iq_stPtm,
															 i_stISG:=CRIX_GPI_01.PG,
															 i_stBSG:=CRIX_GPI_05.PG,
															 ScrollPump:=CRIX_MECH_PRO_01.stPump);															 
ELSE 
	CRIX_VGC_02.i_xExt_OK :=TRUE;
END_IF
			
CRIX_VGC_02(
	i_stUSG:= CRIX_GPI_01.PG, 
	i_stDSG:= CRIX_GPI_05.PG, 
	i_xDis_DPIlk:= FALSE, 
	i_xPMPS_OK:= TRUE, 
	i_xEPS_OK:= , 
	i_xExt_OK:= , 
	i_xOverrideMode:= xSystemOverride_ChemRIXS, 
	i_xReset:= , 
	i_xIsAperture:= , 
	i_sDevName:= , 
	i_nTransitionRootID:= , 
	iq_stValve=> stCRIX_VGC_02, 
	xMPS_OK=> , 
	io_fbFFHWO:= dummy_FFFO, 
	fbArbiter:= dummy_fbArbiter1);
	
bVGC_03_ILK := F_TurboGateValve_Protection_ILK(i_Turbo:=CRIX_PTM_01.iq_stPtm,
											   i_stISG:=CRIX_GPI_01.PG,
											   i_stBSG:=CRIX_GPI_05.PG,
								  			   ScrollPump:=CRIX_MECH_PRO_01.stPump);
CRIX_VGC_03(i_xExtILK_OK:=bVGC_03_ILK,
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve =>stCRIX_VGC_03);
			
bVGC_04_ILK := F_TurboGateValve_Protection_ILK(i_Turbo:=CRIX_PTM_03.iq_stPtm,
											   i_stISG:=CRIX_GPI_01.PG,
											   i_stBSG:=CRIX_GPI_05.PG,
								  			   ScrollPump:=CRIX_MECH_PRO_01.stPump);			
CRIX_VGC_04(i_xExtILK_OK:=bVGC_04_ILK,
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve =>stCRIX_VGC_04);
			
// This is roughing valve for VLS, apply the same logic as roughing valves for chamber

(*Roughing valve permit to open condition : 
Roughing pump is running
Roughing line pressure is below than configured rough vacuum setpoint
Turbo is running and no fault.
The above interlocks will be good for the system is already under vacuum.  For starting pumping down, we can set up VLS to Set Up mode to open both VLS gate valve and window valve. 
So we can pump down main chamber and VLS together through VGC-02.  
*)			
bVGC_05_ILK := F_TurboGateValve_Protection_ILK(i_Turbo:=VLS_PTM_01.iq_stPtm,
											   i_stISG:=VLS_GPI_01.PG,
											   i_stBSG:=CRIX_GPI_05.PG,
								  			   ScrollPump:=CRIX_MECH_PRO_01.stPump);
CRIX_VGC_05(i_xExtILK_OK:=bVGC_05_ILK,
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve =>stCRIX_VGC_05);

// This is roughing valve for Load Lock Chamber , apply the same logic as roughing valves for chamber			
			
bVGC_06_ILK := F_TurboGateValve_Protection_ILK(i_Turbo:=CRIX_PTM_04.iq_stPtm,
											   i_stISG:=CRIX_GCP_03.PG,
											   i_stBSG:=CRIX_GPI_05.PG,
								  			   ScrollPump:=CRIX_MECH_PRO_01.stPump);

CRIX_VGC_06(i_xExtILK_OK:=bVGC_06_ILK,  // Not active right now; leave ILK to initialized FALSE
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve =>stCRIX_VGC_06);


(*
bVGC_07_ILK := F_TurboGateValve_ILK(i_Turbo:=RIX_LI3K2_PTM_01,
									i_stISG:=);
*)			
CRIX_VGC_07(i_xExtILK_OK:=bVGC_07_ILK,  // Not active right now; leave ILK to initialized FALSE
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve =>stCRIX_VGC_07);

    

//beamline dummy gauge
bm_dummy_gauge.xPRESS_OK := TRUE;
bm_dummy_gauge.xAT_VAC := TRUE;
bm_dummy_gauge.eState := ValidLo;
bm_dummy_gauge.rPRESS := 5e-9;

CRIX_VGC_08(
	i_stUSG:= TM2K2_GCC_01_reader.IG,// PRG_ADS_Gauges.TM2K2_GCC_Reader.IG, 
	i_stDSG:= CRIX_GCP_04.PG, 
	i_xDis_DPIlk:= FALSE, 
	i_xPMPS_OK:= TRUE, 
	i_xEPS_OK:= TRUE , 
	i_xExt_OK:= TRUE , 
	i_xOverrideMode:= xSystemOverride_ChemRIXS, 
	i_xReset:= , 
	i_xIsAperture:= , 
	i_sDevName:='CRIX:VGC:08' , 
	i_nTransitionRootID:= , 
	iq_stValve=> , 
	xMPS_OK=> , 
	io_fbFFHWO:= GVL_PMPS.g_FastFaultOutput1, 
	fbArbiter:= GVL_PMPS.fbArbiter1);
       
CRIX_VGC_09(i_stUSG:=CRIX_GCP_04.PG,
            i_stDSG:=IM6K2_GCC_01_reader.IG,// PRG_ADS_Gauges.IM6K2_GCC_Reader.IG,
            i_xDis_DPILK:=FALSE,
            i_xPMPS_OK:=TRUE,
            i_xEPS_OK:=TRUE,
			i_xExt_OK:= TRUE ,
            i_xOverrideMode:=xSystemOverride_ChemRIXS,
            i_xReset:=,
            i_xIsAperture:=FALSE,
            i_sDevName:= 'CRIX:VGC:09',
            i_nTransitionRootID:=,
            iq_stValve=>,
            xMPS_OK=>,
            io_fbFFHWO:= GVL_PMPS.g_FastFaultOutput1, 
			fbArbiter:= GVL_PMPS.fbArbiter1);

(* ual acting valve, allow to close when motor is at OUT limit switch*, Open interlock pending for requirements *)

bVGC_10_OPN_OK := TRUE;
bVGC_10_CLS_OK := NOT xEcatBridge_TxPDO_state and NOT xEcatBridge_External_device_not_connected and NOT xEcatBridge_WcState 
                   AND NOT xPTC_MOT_Y_10_IN and xPTC_MOT_Y_10_OUT;
CRIX_VGC_10 (
	i_OPN_OK:= bVGC_10_OPN_OK, 
	i_CLS_OK:= bVGC_10_CLS_OK, 
	ibCntrlHold:= FALSE , 
	i_xOverrideMode:= xSystemOverride_ChemRIXS, 
	iq_stValve=> );
	
(* ual acting valve, allow to close when motor is at OUT limit switch*, Open interlock pending for requirements *)

bVGC_11_OPN_OK := TRUE;
bVGC_11_CLS_OK := NOT xEcatBridge_TxPDO_state and NOT xEcatBridge_External_device_not_connected and NOT xEcatBridge_WcState 
                   AND NOT xPTC_MOT_Y_11_IN and xPTC_MOT_Y_11_OUT;
CRIX_VGC_11(
	i_OPN_OK:= bVGC_11_OPN_OK, 
	i_CLS_OK:= bVGC_11_CLS_OK, 
	ibCntrlHold:= FALSE , 
	i_xOverrideMode:= xSystemOverride_ChemRIXS, 
	iq_stValve=> );	
(*cold trap roughing valve, Open interlock pending for requirements*)

	
CRIX_VGC_12(i_xExtILK_OK:= True , i_xOverrideMode:= xSystemOverride_ChemRIXS, iq_stValve=> );	

CRIX_VGC_13(i_xExtILK_OK:= True, i_xOverrideMode:= xSystemOverride_ChemRIXS, iq_stValve=> );


bVGC_17_ILK := TRUE;
CRIX_VGC_17(i_xExtILK_OK:=bVGC_17_ILK,
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve =>);
			
// ChemRIXS Vent Valves
CRIX_VVC_01(i_xExtILK_OK:=(NOT stCRIX_VVC_02.q_xOPN_DO),
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve =>stCRIX_VVC_01);
			
CRIX_VVC_02(i_xExtILK_OK:=(NOT stCRIX_VVC_01.q_xOPN_DO),
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve =>stCRIX_VVC_02);
			
CRIX_VVC_03(i_xExtILK_OK:=(NOT stCRIX_VVC_04.q_xOPN_DO),
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve =>stCRIX_VVC_03);
			
CRIX_VVC_04(i_xExtILK_OK:=(NOT stCRIX_VVC_03.q_xOPN_DO),
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve =>stCRIX_VVC_04);
(*			
CRIX_VVC_05(i_xExtILK_OK:=TRUE,
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve => stCRIX_VVC_05);
			
CRIX_VVC_06(i_xExtILK_OK:=TRUE,
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve => stCRIX_VVC_06);
			
CRIX_VVC_07(i_xExtILK_OK:=TRUE,
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve => stCRIX_VVC_07);
	
CRIX_VVC_09(i_xExtILK_OK:=TRUE,
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve => stCRIX_VVC_09);
			
CRIX_VVC_10(i_xExtILK_OK:=TRUE,
			i_xOverrideMode:=xSystemOverride_ChemRIXS,
			iq_stValve => stCRIX_VVC_10);
*)


(* PLC interfaces to Motion PLC *)
xPTC_VGC_10_CLS := CRIX_VGC_10.iq_stValve.i_xClsLS;
xPTC_VGC_11_CLS := CRIX_VGC_11.iq_stValve.i_xClsLS;
xPTC_VGC_10_OPN := CRIX_VGC_10.iq_stValve.i_xOpnLS;
xPTC_VGC_11_OPN := CRIX_VGC_11.iq_stValve.i_xOpnLS;

]]></ST>
    </Implementation>
    <LineIds Name="PRG_Chamber_Valves">
      <LineId Id="3" Count="2" />
      <LineId Id="181" Count="0" />
      <LineId Id="6" Count="61" />
      <LineId Id="216" Count="1" />
      <LineId Id="219" Count="2" />
      <LineId Id="184" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="226" Count="5" />
      <LineId Id="72" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="235" Count="2" />
      <LineId Id="234" Count="0" />
      <LineId Id="76" Count="43" />
      <LineId Id="398" Count="0" />
      <LineId Id="120" Count="8" />
      <LineId Id="319" Count="2" />
      <LineId Id="303" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="305" Count="4" />
      <LineId Id="304" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="322" Count="9" />
      <LineId Id="311" Count="0" />
      <LineId Id="337" Count="1" />
      <LineId Id="333" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="257" Count="2" />
      <LineId Id="129" Count="37" />
      <LineId Id="2" Count="0" />
      <LineId Id="365" Count="1" />
      <LineId Id="364" Count="0" />
      <LineId Id="367" Count="1" />
      <LineId Id="371" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="372" Count="0" />
      <LineId Id="369" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>